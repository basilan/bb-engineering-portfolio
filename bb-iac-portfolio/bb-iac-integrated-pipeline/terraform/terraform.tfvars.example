# BB IaC Integrated Pipeline - Terraform Variables
# Copy this file to terraform.tfvars and customize for your environment

# AWS Configuration
aws_region = "us-east-1"

# Project Configuration
project_name = "bb-iac-pipeline"
environment = "demo"

# Instance Configuration
instance_type = "t3.micro"  # Free tier eligible

# SSH Access Configuration
# Generate a key pair with: ssh-keygen -t rsa -b 4096 -f ~/.ssh/bb-iac-key
ssh_public_key_path = "~/.ssh/bb-iac-key.pub"

# Network Configuration
vpc_cidr = "10.0.0.0/16"
public_subnet_cidr = "10.0.1.0/24"

# Security Configuration
allowed_ssh_cidr = "0.0.0.0/0"  # SECURITY WARNING: Restrict to your IP for production
allowed_http_cidr = "0.0.0.0/0"

# Budget and Cost Controls
budget_limit_usd = 10.0  # Monthly budget alert threshold

# Tags (customize as needed)
tags = {
  Project     = "BB Engineering Portfolio"
  Environment = "Demo"
  Owner       = "BB Engineering"
  Purpose     = "IaC Integration Pipeline"
  CostCenter  = "Engineering"
}

# Advanced Configuration (Optional)
enable_detailed_monitoring = false  # Set to true for production
backup_retention_days = 7
log_retention_days = 14

# S3 Configuration for state and artifacts
s3_versioning_enabled = true
s3_encryption_enabled = true

# CloudWatch Configuration
enable_cloudwatch_logs = true
cloudwatch_log_retention = 7  # days

# Maintenance and Updates
enable_automatic_updates = true
maintenance_window = "sun:03:00-sun:04:00"  # UTC time

# Example deployment commands:
# 1. Copy this file: cp terraform.tfvars.example terraform.tfvars
# 2. Edit terraform.tfvars with your specific values
# 3. Initialize: terraform init
# 4. Plan: terraform plan
# 5. Apply: terraform apply
# 6. Configure: ansible-playbook -i inventory/aws_ec2.yml site.yml
# 7. Test: python -m pytest tests/ -v