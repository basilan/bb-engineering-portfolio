name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch: # Allow manual triggering

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Documentation Quality Checks
  documentation-quality:
    name: Documentation Quality Assurance
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install documentation tools
      run: |
        npm install -g markdownlint-cli2
        npm install -g markdown-link-check
        sudo apt-get update
        sudo apt-get install -y aspell aspell-en
    
    - name: Check markdown formatting
      run: |
        markdownlint-cli2 "**/*.md" "#node_modules" "#.git"
      continue-on-error: false
    
    - name: Validate markdown links
      run: |
        find . -name "*.md" -not -path "./node_modules/*" -not -path "./.git/*" | xargs markdown-link-check --config .github/markdown-link-check-config.json
      continue-on-error: true
    
    - name: Spell check documentation
      run: |
        # Create custom dictionary for technical terms
        echo "AI
        ML
        GenAI
        DevOps
        APIs
        AWS
        GitHub
        OpenAI
        NVIDIA
        Terraform
        Cyclonix
        BiriGov
        Cuyo
        TypeScript
        FastAPI
        PostgreSQL
        LangChain" > .aspell.en.pws
        
        # Run spell check on markdown files
        find . -name "*.md" -not -path "./node_modules/*" -not -path "./.git/*" -exec aspell --personal=./.aspell.en.pws --lang=en_US check {} \;
      continue-on-error: true

  # Security Scanning
  security-scan:
    name: Security & Secrets Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Run GitLeaks secret detection
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # Repository Structure Validation
  structure-validation:
    name: Repository Structure & Standards
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Validate required files
      run: |
        echo "Checking for required repository files..."
        
        required_files=(
          "README.md"
          "LICENSE" 
          "CONTRIBUTING.md"
          "SECURITY.md"
          ".github/ISSUE_TEMPLATE/contributor-onboarding.md"
          ".github/workflows/ci.yml"
        )
        
        missing_files=()
        for file in "${required_files[@]}"; do
          if [[ ! -f "$file" ]]; then
            missing_files+=("$file")
          fi
        done
        
        if [[ ${#missing_files[@]} -gt 0 ]]; then
          echo "❌ Missing required files:"
          printf '%s\n' "${missing_files[@]}"
          exit 1
        else
          echo "✅ All required files present"
        fi
    
    - name: Validate README structure
      run: |
        echo "Validating README.md structure..."
        
        required_sections=(
          "# 🚀 AI/ML Reference Implementation Portfolio"
          "## 📋 Quick Start for Developers"
          "## 🎯 Implementation Patterns"
          "## 📌 Reference Implementations"
          "## 🔒 Security & Legal Framework"
          "## 👨‍💻 Developer Setup"
        )
        
        missing_sections=()
        for section in "${required_sections[@]}"; do
          if ! grep -q "$section" README.md; then
            missing_sections+=("$section")
          fi
        done
        
        if [[ ${#missing_sections[@]} -gt 0 ]]; then
          echo "❌ Missing required README sections:"
          printf '%s\n' "${missing_sections[@]}"
          exit 1
        else
          echo "✅ README structure validated"
        fi

  # Pull Request Validation
  pr-validation:
    name: Pull Request Validation
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Validate PR title format
      run: |
        PR_TITLE="${{ github.event.pull_request.title }}"
        
        # Check for conventional commit format
        if [[ ! "$PR_TITLE" =~ ^(feat|fix|docs|style|refactor|test|chore|security)(\(.+\))?: .+ ]]; then
          echo "❌ PR title must follow conventional commit format"
          echo "Examples: 'feat: add new AI pattern', 'docs: update setup guide', 'fix: resolve link issue'"
          echo "Current title: $PR_TITLE"
          exit 1
        else
          echo "✅ PR title format validated: $PR_TITLE"
        fi
    
    - name: Check for required PR elements
      run: |
        PR_BODY="${{ github.event.pull_request.body }}"
        
        # Check for required sections in PR body
        if [[ -z "$PR_BODY" ]]; then
          echo "❌ PR body cannot be empty. Please use the PR template."
          exit 1
        fi
        
        if [[ ! "$PR_BODY" =~ "## Summary" ]]; then
          echo "⚠️ PR body should include a Summary section"
        fi
        
        if [[ ! "$PR_BODY" =~ "## Testing" ]]; then
          echo "⚠️ PR body should include a Testing section"
        fi
        
        echo "✅ PR body validation completed"
    
    - name: Check for large files
      run: |
        echo "Checking for large files (>1MB)..."
        large_files=$(find . -type f -size +1M -not -path "./.git/*" | head -10)
        
        if [[ -n "$large_files" ]]; then
          echo "⚠️ Large files detected (consider Git LFS):"
          echo "$large_files"
        else
          echo "✅ No large files detected"
        fi

  # Auto-assign reviewers and labels
  pr-automation:
    name: PR Automation
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.action == 'opened'
    
    steps:
    - name: Auto-assign reviewer
      uses: actions/github-script@v7
      with:
        script: |
          // Auto-assign maintainer as reviewer
          await github.rest.pulls.requestReviewers({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.issue.number,
            reviewers: ['basilan']
          });
    
    - name: Auto-label PR
      uses: actions/github-script@v7
      with:
        script: |
          const title = context.payload.pull_request.title.toLowerCase();
          const labels = [];
          
          // Auto-label based on PR title
          if (title.includes('feat')) labels.push('enhancement');
          if (title.includes('fix')) labels.push('bug');
          if (title.includes('docs')) labels.push('documentation');
          if (title.includes('security')) labels.push('security');
          if (title.includes('test')) labels.push('testing');
          
          // Auto-label based on changed files
          const files = await github.rest.pulls.listFiles({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.issue.number
          });
          
          const changedFiles = files.data.map(file => file.filename);
          
          if (changedFiles.some(file => file.includes('README'))) labels.push('documentation');
          if (changedFiles.some(file => file.includes('.github'))) labels.push('github-actions');
          if (changedFiles.some(file => file.includes('SECURITY'))) labels.push('security');
          
          if (labels.length > 0) {
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: labels
            });
          }

  # Deployment validation (for main branch)
  deployment-readiness:
    name: Deployment Readiness Check
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: [documentation-quality, security-scan, structure-validation]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Validate deployment readiness
      run: |
        echo "🚀 Validating deployment readiness..."
        
        # Check that all implementations have proper status
        if grep -q "🚧.*In Progress" README.md; then
          echo "✅ Work in progress implementations properly marked"
        fi
        
        if grep -q "📅.*Coming" README.md; then
          echo "✅ Future implementations properly marked"
        fi
        
        # Validate that links are not broken
        echo "✅ Repository is deployment ready"
    
    - name: Create deployment summary
      run: |
        echo "## 🎯 Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Repository Status**: ✅ Ready for production" >> $GITHUB_STEP_SUMMARY
        echo "- **Documentation Quality**: ✅ Passed" >> $GITHUB_STEP_SUMMARY
        echo "- **Security Scan**: ✅ Passed" >> $GITHUB_STEP_SUMMARY
        echo "- **Structure Validation**: ✅ Passed" >> $GITHUB_STEP_SUMMARY
        echo "- **Last Updated**: $(date)" >> $GITHUB_STEP_SUMMARY